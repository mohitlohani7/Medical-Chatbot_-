
from flask import Flask, render_template, request
from src.helper import download_hugging_face_embeddings
from langchain_pinecone import PineconeVectorStore
from langchain.prompts import ChatPromptTemplate
from dotenv import load_dotenv
from src.prompt import *
import os
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_groq import ChatGroq
from langchain.chains import create_retrieval_chain
from langchain.chains import LLMChain

app = Flask(__name__)

# Load environment variables
load_dotenv()
PINECONE_API_KEY = os.getenv('PINECONE_API_KEY')
GROQ_API_KEY = os.getenv('GROQ_API_KEY')

# Configure embeddings and Pinecone index
embeddings = HuggingFaceEmbeddings(model_name='sentence-transformers/all-MiniLM-L6-v2')
index_name = "medicalbot"

# Connect to existing Pinecone index
docsearch = PineconeVectorStore.from_existing_index(
    index_name=index_name,
    embedding=embeddings
)

# Configure retriever
retriever = docsearch.as_retriever(search_type="similarity", search_kwargs={"k": 3})

# Set up Groq LLM model
llm = ChatGroq(api_key=GROQ_API_KEY, temperature=0.4, max_tokens=500)

# Create the document combination chain using LLMChain
combine_docs_chain = LLMChain(
    llm=llm,
    prompt=ChatPromptTemplate.from_messages([
        ("system", system_prompt),
        ("human", "{input}"),
    ]),
)

# Create the retrieval chain
rag_chain = create_retrieval_chain(retriever=retriever, combine_docs_chain=combine_docs_chain)

# Define routes
@app.route("/")
def index():
    return render_template('chat.html')

@app.route("/get", methods=["GET", "POST"])
def chat():
    msg = request.form["msg"]
    print(f"Received message: {msg}")  # Log the input message

    response = rag_chain.invoke({"input": msg})
    print(f"Raw response: {response}")  # Log the full raw response for debugging

    # Access the answer from the response
    answer = response.get("output") #, "Sorry, I didn't understand that.")
    return str(answer)

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8080, debug=True)